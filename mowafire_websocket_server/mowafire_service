#!/usr/bin/python

import tornado.web
import tornado.websocket
import tornado.ioloop
from tornado import gen
import serial
import sys, time

arduino = serial.Serial('/dev/arduino',9600,timeout=0)

class WebSocketHandler(tornado.websocket.WebSocketHandler):
        @tornado.web.asynchronous
        @gen.engine
        def open(self):
                print "New client connected"
                while True:
                        #arduino.flushInput()
                        energy_consumption_msg = arduino.readline()
                        if energy_consumption_msg != "":
                                self.write_message(energy_consumption_msg)
                        yield gen.Task(tornado.ioloop.IOLoop.instance().add_timeout, time.time() + .5)

        @tornado.web.asynchronous
        @gen.engine
        def on_message(self, message):
                #self.write_message(message)
                arduino.write(message)
                arduino.flushInput()
                print 'message: %s.' % message
                #yield gen.Task(tornado.ioloop.IOLoop.instance().add_timeout, time.time() + .4)

        @tornado.web.asynchronous
        @gen.engine
        def on_close(self):
                print "Client disconnected"


application = tornado.web.Application([
 (r"/", WebSocketHandler),
])

class MyDaemon:
   def run(self):

#!/usr/bin/python

import tornado.web
import tornado.websocket
import tornado.ioloop
from tornado import gen
import serial
import sys, time

arduino = serial.Serial('/dev/arduino',9600,timeout=0)

class WebSocketHandler(tornado.websocket.WebSocketHandler):
        @tornado.web.asynchronous
        @gen.engine
        def open(self):
                print "New client connected"
                while True:
                        #arduino.flushInput()
                        energy_consumption_msg = arduino.readline()
                        if energy_consumption_msg != "":
                                self.write_message(energy_consumption_msg)
                        yield gen.Task(tornado.ioloop.IOLoop.instance().add_timeout, time.time() + .5)

        @tornado.web.asynchronous
        @gen.engine
        def on_message(self, message):
                #self.write_message(message)
                arduino.write(message)
                arduino.flushInput()
                print 'message: %s.' % message
                #yield gen.Task(tornado.ioloop.IOLoop.instance().add_timeout, time.time() + .4)

        @tornado.web.asynchronous
        @gen.engine
        def on_close(self):
                print "Client disconnected"


application = tornado.web.Application([
 (r"/", WebSocketHandler),
])

class MyDaemon:
   def run(self):
       pass
   def start(self):
       application.listen(8888)
       tornado.ioloop.IOLoop.instance().start()

   def stop(self):
       application.listen(8888)
       tornado.ioloop.IOLoop.instance().stop()

   def restart(self):
       application.listen(8888)
       tornado.ioloop.IOLoop.instance().start()
       tornado.ioloop.IOLoop.instance().stop()

if __name__ == "__main__":
    daemon = MyDaemon()
    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            daemon.start()
        elif 'stop' == sys.argv[1]:
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            daemon.restart()
        else:
